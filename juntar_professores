import xml.dom.minidom as mnd

filename = ["Marcelle_Pereira_Mota.xml","Claudomiro_de_Souza_de_Sales_Junior.xml"]
nomes_completos = ["Marcelle Pereira Mota", "Claudomiro de Souza de Sales Junior"]
nomes_completos.sort()
filename.sort()

def extrair_Info (filename, nomes):
    
    def extrair_info(path, roo_t, child1, child2, *argv):
        doc = mnd.parse(path);
        contador = -1
        root = doc.getElementsByTagName(roo_t); #Pega o root dos currículos
        
        child_dadosBasicos = []; #Cria uma lista para o endereço de todas as child que serão inseridas aqui e na lista posterior
        child_detalhamento = [];
    
        atributos = [] #Cria uma lista para armazenar o atributo de todas child
        atributos_Tag = [] #Lista para armazenar a Tag dos atributos
        
        dic = {}#Dicionário que será retornado no final da função
    
        for i in root:
            child_dadosBasicos.append( i.getElementsByTagName(child1)) #Adiciona o endereço da respectiva child nas listas child_X
            child_detalhamento.append( i.getElementsByTagName(child2))
            
        for arg in argv:
            contador += 1 #Contador para alocar os atributos em seus devidos lugares
            atributos.append([]) #Cria uma sub-lista que irá armazenar os atributos de cada Tag separadamente
            atributos_Tag.append(arg) #Adiciona a Tag em questão na lista de Tag
            for i, j in zip (child_dadosBasicos, child_detalhamento):
                try:
                    atributos[contador].append((nomes,i[0].attributes[arg].value)) #Tenta buscar o atributo na primeira child, se não for encontrado parte para o segundo
                except KeyError:
                    atributos[contador].append((nomes,j[0].attributes[arg].value))
        
        for i in range(len(atributos)):
            dic[atributos_Tag[i]] = atributos[i] #Adiciona para cada chave a tupla contendo todos elementos da sublista em questão
        
        return dic
            
    eventos = extrair_info(filename, 'TRABALHO-EM-EVENTOS', 'DADOS-BASICOS-DO-TRABALHO', 'DETALHAMENTO-DO-TRABALHO', 'TITULO-DO-TRABALHO', 'ANO-DO-TRABALHO', 'TITULO-DOS-ANAIS-OU-PROCEEDINGS', 'DOI')
    artigos = extrair_info(filename,'ARTIGO-PUBLICADO','DADOS-BASICOS-DO-ARTIGO', 'DETALHAMENTO-DO-ARTIGO', 'TITULO-DO-ARTIGO', 'ANO-DO-ARTIGO', 'TITULO-DO-PERIODICO-OU-REVISTA', 'DOI')
    capitulos = extrair_info(filename, 'CAPITULO-DE-LIVRO-PUBLICADO', 'DADOS-BASICOS-DO-CAPITULO', 'DETALHAMENTO-DO-CAPITULO', 'TITULO-DO-CAPITULO-DO-LIVRO', 'ANO', 'TITULO-DO-LIVRO', 'DOI')
    apresentacoes = extrair_info(filename, 'APRESENTACAO-DE-TRABALHO', 'DADOS-BASICOS-DA-APRESENTACAO-DE-TRABALHO', 'DETALHAMENTO-DA-APRESENTACAO-DE-TRABALHO', 'TITULO', 'ANO', 'NOME-DO-EVENTO', 'CIDADE-DA-APRESENTACAO', 'DOI')
    
    lista = [eventos, artigos, capitulos, apresentacoes]
    
    return lista

b = extrair_Info(filename[0], nomes_completos[0])

def juntar_professores(filename, nomes_completos):
    trabalhos_em_eventos = []
    artigos_publicados = []
    capitulos_publicados = []
    apresentacoes_trabalho = []
    lista_geral = []
    
    for name, comp_name in zip (filename, nomes_completos):
        a = extrair_Info(name, comp_name)
        trabalhos_em_eventos.append(a[0])
        artigos_publicados.append(a[1])
        capitulos_publicados.append(a[2])
        apresentacoes_trabalho.append(a[3])
    lista_geral.append(trabalhos_em_eventos)
    lista_geral.append(artigos_publicados)
    lista_geral.append(capitulos_publicados)
    lista_geral.append(apresentacoes_trabalho)
    
    return lista_geral

c = juntar_professores(filename, nomes_completos)
